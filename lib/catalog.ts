import Airtable from 'airtable';type Item=Record<string,any>;export async function getCatalog():Promise<Item[]>{try{const baseId=process.env.AIRTABLE_BASE as string|undefined;const token=process.env.AIRTABLE_TOKEN as string|undefined;const table=process.env.AIRTABLE_PRODUCTS_TABLE||'Products';const view=process.env.AIRTABLE_VIEW||'Sellable';if(!baseId||!token)throw new Error('No Airtable');const base=new Airtable({apiKey:token}).base(baseId);const records=await base(table).select({view}).all();return records.map(r=>({id:r.id,...r.fields})) as Item[]}catch{const data=await import('@/data/catalog.json');return data.default as Item[]}}export async function findPriceForSKU(sku:string){const items=await getCatalog();const it=items.find(x=>String(x.SKU)===String(sku));const price=typeof it?.['Your Price USD']==='number'?it['Your Price USD']:Number(it?.['Your Price USD']||0);return Number.isFinite(price)?price:0}